package br.com.orange.forum.controller;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.orange.forum.modelo.Topico;
import br.com.orange.forum.repository.CursoRepository;
import br.com.orange.forum.repository.TopicoRepository;

@RequestMapping("/topicos")
@RestController
public class TopicoController {
	
	
//	@RequestMapping("/topicos")
//	@ResponseBody // para que o spring entenda que essa não é um pagina web
//	public List<TopicoDTO> listaTopico (){
//		
//		Topico topico = new Topico("Java", "Testando controller", 
//				new Curso("Java-JPA", "Spring"));
//		// terá que fazer a conversão de topico para topicoDTO
//		//criará um método no DTO, para não deixar a lógica solta no controller
//		return TopicoDTO.converter(Arrays.asList(topico,topico));
//	}
	@Autowired
	private TopicoRepository repository;
	
	@Autowired
	private CursoRepository cursoRepository;
	
	@GetMapping
	public List<TopicoDTO> listaTopico (String nomeCurso){
		if (nomeCurso == null) {
			List<Topico> topicos = repository.findAll();
			return TopicoDTO.converter(topicos);
		} else {
			List<Topico> topicos = repository.findByCurso_Nome(nomeCurso);
			return TopicoDTO.converter(topicos);
		}
		
	}
	
	@PostMapping
	public  ResponseEntity<TopicoDTO>cadastrar(@RequestBody @Valid TopicoForm form, UriComponentsBuilder uriBuilder) {
		Topico topico = form.converter(cursoRepository); // converter para topico
		repository.save(topico);	
		
		URI uri = uriBuilder.path("/topicos/{id}").buildAndExpand(topico.getId()).toUri();
		return ResponseEntity.created(uri).body(new TopicoDTO(topico));
		
		
	}
	@GetMapping("/{id}")
	public ResponseEntity<DetalhesDoTopicoDTO> busqueUm (@PathVariable Long id) {
		Optional<Topico> topico  = repository.findById(id); // melhor do que getOne, não retorna exeception
		
		if (topico.isPresent()) {
			return ResponseEntity.ok(new DetalhesDoTopicoDTO(topico.get()));// get para achar o topico dentro do dto
		}
		
		return ResponseEntity.notFound().build();
		
	}
	
	@PutMapping("/{id}")
	@Transactional // para acontecer o commit automatico no banco de dados
	public ResponseEntity<TopicoDTO>atualizar (@PathVariable Long id, 
			@RequestBody @Valid AtualizacaoTopicoForm form) {
		Optional<Topico> optional  = repository.findById(id);
		
		if (optional.isPresent()) {
			Topico topico = form.atualizar(id, repository);
			return ResponseEntity.ok(new TopicoDTO(topico));
		}
		return ResponseEntity.notFound().build();
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<?> deletar(@PathVariable Long id){
		
		Optional<Topico> optional  = repository.findById(id);
		if (optional.isPresent()) {
			repository.deleteById(id);
			return ResponseEntity.ok().build();
		}
		
		return ResponseEntity.notFound().build();
		
	}

}
