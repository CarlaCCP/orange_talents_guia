package br.com.testeOrange.cadastraAluno.controles;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.testeOrange.cadastraAluno.modelo.Aluno;
import br.com.testeOrange.cadastraAluno.repository.AlunoRepository;

@RequestMapping("/aluno")
@RestController
public class AlunoController {
	
	@Autowired
	private AlunoRepository repository;
	
	@GetMapping
	public List<AlunoDTO> listaAluno(){
		List<Aluno> alunos = repository.findAll();
		return AlunoDTO.converter(alunos);
	}
	
	@PostMapping
	public ResponseEntity<AlunoDTO> cadastrar (@RequestBody @Valid AlunoForm form, 
			UriComponentsBuilder uriBuilder ){
		Aluno aluno = form.converter(repository);
		repository.save(aluno);
		URI uri = uriBuilder.path("/aluno/{id}").buildAndExpand(aluno.getId()).toUri();
		
		return ResponseEntity.created(uri).body(new AlunoDTO(aluno));
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<AlunoDTO>  busqueUm(@PathVariable Long id){
		Optional <Aluno> aluno = repository.findById(id);
		if (aluno.isPresent()) {
			return ResponseEntity.ok(new AlunoDTO((aluno.get())));
		}
		
		return ResponseEntity.notFound().build();
	}
	
	@PutMapping("/{id}")
	@Transactional
	public ResponseEntity<AlunoDTO> atualizar (@PathVariable Long id, @RequestBody @Valid AlunoForm form){
		Optional<Aluno> optional = repository.findById(id);
		if (optional.isPresent()) {
			Aluno aluno = form.atualizar(id, repository);
			return ResponseEntity.ok(new AlunoDTO(aluno));
		}
		return ResponseEntity.notFound().build();
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity <?> deletar (@PathVariable Long id){
		Optional<Aluno> optional = repository.findById(id);
		if(optional.isPresent()) {
			repository.deleteById(id);
			return ResponseEntity.ok().build();
		}
		
		return ResponseEntity.notFound().build();
	}
}
